from datetime import datetime
from app import db

class User(db.Model):
    '''
    Класс User наследует от db.Model,
    базового класса для всех моделей из Flask-SQLAlchemy.
    Этот класс определяет несколько полей как переменные класса.
    Поля создаются как экземпляры класса db.Column,
    который принимает тип поля в качестве аргумента,
    плюс другие необязательные аргументы, которые, например,
    позволяют мне указать, какие поля уникальны и индексированы,
    что важно для эффективного поиска базы данных.

    Метод __repr__ сообщает Python, как печатать объекты этого класса,
    что будет полезно для отладки.
    '''
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    password_hash = db.Column(db.String(128))
    posts = db.relationship('Post', backref='author', lazy='dynamic')

    def __repr__(self):
        return '<User {}>'.format(self.username)

class Post(db.Model):
    '''
    Новый класс Post будет представлять записи в блогах,
    написанные пользователями. Поле timestamp будет проиндексировано,
    что полезно, если вы хотите получить сообщения в хронологическом
    порядке. Я также добавил аргумент по умолчанию и передал функцию
    datetime.utcnow. Когда вы передаете функцию по умолчанию,
    SQLAlchemy установит для поля значение вызова этой функции
    (обратите внимание, что я не включил () после utcnow,
    поэтому я передаю эту функцию сам, а не результат ее вызова ).
    В общем, это позволит работать с датами и временем UTC в
    серверном приложении. Это гарантирует, что вы используете
    единые временные метки независимо от того, где находятся
    пользователи. Эти временные метки будут преобразованы в
    локальное время пользователя, когда они будут отображаться.
    '''
    id = db.Column(db.Integer, primary_key=True)
    body = db.Column(db.String(140))
    timestamp = db.Column(db.Datetime, index=True, default=datetime.utcnow)
    # Поле user_id было инициализировано как внешний ключ для user.id,
    # что означает, что оно ссылается на значение id из таблицы users.
    # В этой ссылке user — это имя таблицы базы данных, которую
    # Flask-SQLAlchemy автоматически устанавливает как имя класса
    # модели, преобразованного в нижний регистр. Класс User имеет
    # новое поле сообщений, которое инициализируется db.relationship.
    # Это не фактическое поле базы данных, а высокоуровневое
    # представление о взаимоотношениях между users и posts
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))

    def __repr__(self):
        return '<Post {}>'.format(self.body)
